{"mappings":"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","sources":["<anon>","src/js/main.js"],"sourcesContent":["(function () {\n$(document).ready(function() {\n    // Only run initialization code on the viewer page\n    if (!document.getElementById('jsonInput')) return;\n    // Validation timeout for debouncing\n    let validationTimeout;\n    let hasUserInput = false; // Track if user has interacted with the editor\n    // Initialize JSON editor first\n    const jsonEditor = document.getElementById('jsonInput');\n    // Function to update editor content with proper formatting\n    function updateEditor(json) {\n        let formatted;\n        try {\n            // If json is a string, parse it first\n            const obj = typeof json === 'string' ? JSON.parse(json) : json;\n            formatted = JSON.stringify(obj, null, 2);\n        } catch (e) {\n            formatted = json || '';\n        }\n        jsonEditor.textContent = formatted;\n        Prism.highlightElement(jsonEditor);\n    }\n    // Setup console logging with timestamp\n    window.logger = {\n        info: (msg, data)=>{\n            const time = new Date().toISOString();\n            console.log(`[${time}] INFO: ${msg}`, data || '');\n        },\n        error: (msg, err)=>{\n            const time = new Date().toISOString();\n            console.error(`[${time}] ERROR: ${msg}`, err || '');\n        },\n        debug: (msg, data)=>{\n            const time = new Date().toISOString();\n            console.debug(`[${time}] DEBUG: ${msg}`, data || '');\n        }\n    };\n    // Function to handle URL parameters and initialize theme\n    function initializeFromUrl() {\n        const params = new URLSearchParams(window.location.search);\n        const themeParam = params.get('theme');\n        if (themeParam) {\n            const [credentialType, themeVariant] = themeParam.split(':');\n            if (window.examples[credentialType]) {\n                hasUserInput = true;\n                const example = window.examples[credentialType];\n                updateEditor(example);\n                const result = validateVC(JSON.stringify(example));\n                updateValidationUI(result, true);\n                if (result.isValid) {\n                    // Update theme selector first\n                    updateThemeSelector(credentialType);\n                    // Then set the selected theme\n                    $('#themeSelect').val(themeParam);\n                    processInput();\n                }\n            }\n        }\n    }\n    // Call initialization after everything is set up\n    setTimeout(initializeFromUrl, 100); // Increased timeout to ensure DOM is ready\n    // Real-time validation\n    function validateVC(jsonStr) {\n        try {\n            if (!jsonStr.trim()) return {\n                isValid: false,\n                error: 'Input is empty'\n            };\n            let credential;\n            try {\n                credential = JSON.parse(jsonStr);\n            } catch (e) {\n                return {\n                    isValid: false,\n                    error: 'Invalid JSON format',\n                    details: e.message\n                };\n            }\n            const errors = [];\n            // Context validation\n            if (!credential['@context']) errors.push('Missing @context field');\n            else if (!Array.isArray(credential['@context'])) errors.push('@context must be an array');\n            else if (!credential['@context'].includes('https://www.w3.org/2018/credentials/v1')) errors.push('@context must include \"https://www.w3.org/2018/credentials/v1\"');\n            // Type validation\n            if (!credential.type) errors.push('Missing type field');\n            else if (!Array.isArray(credential.type)) errors.push('type must be an array');\n            else {\n                if (!credential.type.includes('VerifiableCredential')) errors.push('type must include \"VerifiableCredential\"');\n                if (credential.type.length < 2) errors.push('type should include at least one specific credential type');\n            }\n            // Issuer validation\n            if (!credential.issuer) errors.push('Missing issuer field');\n            else if (typeof credential.issuer !== 'object' && typeof credential.issuer !== 'string') errors.push('issuer must be an object or string');\n            else if (typeof credential.issuer === 'object' && !credential.issuer.id) errors.push('issuer object must have an id field');\n            // Issuance date validation\n            if (!credential.issuanceDate) errors.push('Missing issuanceDate field');\n            else try {\n                new Date(credential.issuanceDate).toISOString();\n            } catch (e) {\n                errors.push('issuanceDate must be a valid ISO 8601 date');\n            }\n            // Credential subject validation\n            if (!credential.credentialSubject) errors.push('Missing credentialSubject field');\n            else if (typeof credential.credentialSubject !== 'object') errors.push('credentialSubject must be an object');\n            if (errors.length > 0) return {\n                isValid: false,\n                error: 'Invalid Verifiable Credential',\n                details: errors\n            };\n            return {\n                isValid: true,\n                details: [\n                    `Valid credential type: ${credential.type[credential.type.length - 1]}`,\n                    `Issued by: ${typeof credential.issuer === 'string' ? credential.issuer : credential.issuer.name || credential.issuer.id}`,\n                    `Issued on: ${new Date(credential.issuanceDate).toLocaleDateString()}`\n                ]\n            };\n        } catch (e) {\n            return {\n                isValid: false,\n                error: 'Validation error',\n                details: e.message\n            };\n        }\n    }\n    function updateValidationUI(validationResult, hasUserInput = false) {\n        const $feedback = $('.validation-feedback');\n        // Remove existing validation states\n        $feedback.removeClass('is-valid is-invalid show');\n        // Only show validation feedback if there's user input\n        if (!hasUserInput) return;\n        // Show the feedback container and add appropriate state\n        $feedback.addClass('show');\n        if (validationResult.isValid) $feedback.addClass('is-valid');\n        else {\n            $feedback.addClass('is-invalid');\n            if (validationResult.details) {\n                const detailsHtml = Array.isArray(validationResult.details) ? `<ul class=\"validation-details\">\n                        ${validationResult.details.map((detail)=>`<li>${detail}</li>`).join('')}\n                       </ul>` : `<div class=\"mt-1\">${validationResult.details}</div>`;\n                $('.invalid-feedback').html(`\n                    <i class=\"fas fa-exclamation-circle\"></i>\n                    <div>\n                        <strong>${validationResult.error}</strong>\n                        ${detailsHtml}\n                    </div>\n                `);\n            }\n        }\n    }\n    function updateThemeSelector(credentialType) {\n        const $themeSelect = $('#themeSelect');\n        $themeSelect.empty();\n        const themes = BaseTheme.getThemesByType(credentialType);\n        if (themes && themes.length > 0) {\n            themes.forEach((theme)=>{\n                const themeId = `${credentialType}:${theme.id}`;\n                $themeSelect.append(`<option value=\"${themeId}\">${theme.name}</option>`);\n            });\n            // Select the first theme by default\n            $themeSelect.val(`${credentialType}:${themes[0].id}`);\n        } else $themeSelect.append('<option value=\"\" disabled>No themes available</option>');\n    }\n    // Update the processInput function to handle theme selection\n    function processInput() {\n        const jsonInput = jsonEditor.textContent.trim();\n        if (!jsonInput) {\n            updateValidationUI({\n                isValid: false,\n                error: 'Input is empty'\n            }, true);\n            document.getElementById('previewContainer').innerHTML = '';\n            return;\n        }\n        try {\n            const credential = JSON.parse(jsonInput);\n            // Validate the credential\n            const validationResult = validateVC(jsonInput);\n            updateValidationUI(validationResult, true);\n            if (!validationResult.isValid) {\n                // Clear only the preview if validation fails\n                document.getElementById('previewContainer').innerHTML = '';\n                return;\n            }\n            const outputElement = document.getElementById('previewContainer');\n            // Clear previous output\n            outputElement.innerHTML = '';\n            // Get credential type and update theme selector\n            const credentialType = credential.type[credential.type.length - 1];\n            window.logger.debug(`Getting themes for credential type: ${credentialType}`);\n            // Get URL theme parameter\n            const urlTheme = new URLSearchParams(window.location.search).get('theme');\n            // Update theme selector if needed\n            if ($('#themeSelect option').length === 0) {\n                updateThemeSelector(credentialType);\n                if (urlTheme) $('#themeSelect').val(urlTheme);\n            }\n            // Get available themes\n            const themes = BaseTheme.getThemesByType(credentialType);\n            if (!themes || themes.length === 0) {\n                updateValidationUI({\n                    isValid: false,\n                    error: 'Theme Error',\n                    details: `No theme found for credential type: ${credentialType}`\n                }, true);\n                return;\n            }\n            // Get selected theme\n            let selectedThemeId = urlTheme || $('#themeSelect').val() || `${credentialType}:${themes[0].id}`;\n            const ThemeClass = BaseTheme.getTheme(selectedThemeId);\n            if (!ThemeClass) {\n                updateValidationUI({\n                    isValid: false,\n                    error: 'Theme Error',\n                    details: `Selected theme not found: ${selectedThemeId}`\n                }, true);\n                return;\n            }\n            try {\n                const theme = new ThemeClass(credential);\n                const rendered = theme.render();\n                if (rendered && rendered instanceof Element) {\n                    outputElement.innerHTML = '';\n                    outputElement.appendChild(rendered);\n                } else {\n                    console.error('Theme render() did not return a valid Element');\n                    outputElement.innerHTML = '<div class=\"alert alert-danger\">Error rendering credential</div>';\n                }\n            } catch (error) {\n                console.error('Error rendering theme:', error);\n                outputElement.innerHTML = '<div class=\"alert alert-danger\">Error rendering credential</div>';\n            }\n        } catch (error) {\n            // Update validation UI with error but don't clear it\n            updateValidationUI({\n                isValid: false,\n                error: 'Invalid JSON format',\n                details: error.message\n            }, true);\n            // Clear only the preview on error\n            document.getElementById('previewContainer').innerHTML = '';\n        }\n    }\n    // Handle editor input events\n    jsonEditor.addEventListener('input', function() {\n        hasUserInput = true; // Set flag when user types\n        // Clear existing timeout\n        clearTimeout(validationTimeout);\n        // Set new timeout for validation\n        validationTimeout = setTimeout(()=>{\n            const jsonInput = jsonEditor.textContent.trim();\n            // Only validate if user has interacted\n            if (hasUserInput) {\n                const validationResult = validateVC(jsonInput);\n                updateValidationUI(validationResult, true);\n                // Only attempt to process and render if validation passes\n                if (validationResult.isValid) processInput();\n                else // Just clear the preview, leaving validation messages visible\n                document.getElementById('previewContainer').innerHTML = '';\n            }\n        }, 500);\n    });\n    // Update validation feedback elements if they don't exist\n    if (!$('.validation-feedback').length) $('.card').after(`\n            <div class=\"validation-feedback\">\n                <div class=\"valid-feedback\">\n                    <i class=\"fas fa-check-circle\"></i>\n                    <div>\n                        <strong>Valid Verifiable Credential</strong>\n                    </div>\n                </div>\n                <div class=\"invalid-feedback\"></div>\n            </div>\n        `);\n    // Style the validation feedback\n    $('<style>').text(`\n            .editor-container { position: relative; }\n            .validation-feedback {\n                padding: 0.75rem;\n                border-radius: 0.5rem;\n                margin-top: 1.5rem;\n                background: white;\n                box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n                display: none;\n            }\n            .validation-feedback.show {\n                display: block;\n            }\n            .validation-feedback i {\n                margin-right: 0.5rem;\n                font-size: 1.1em;\n            }\n            .validation-details {\n                padding-left: 1.5rem;\n                margin-top: 0.5rem;\n                font-size: 0.9em;\n            }\n            .validation-feedback.is-valid .valid-feedback { display: flex !important; }\n            .validation-feedback.is-valid .invalid-feedback { display: none !important; }\n            .validation-feedback.is-invalid .valid-feedback { display: none !important; }\n            .validation-feedback.is-invalid .invalid-feedback { display: flex !important; }\n        `).appendTo('head');\n    // Handle example buttons\n    $('#universityExample').on('click', function() {\n        hasUserInput = true; // Set flag when example is loaded\n        const example = window.examples['UniversityDegreeCredential'];\n        updateEditor(example);\n        const result = validateVC(JSON.stringify(example));\n        updateValidationUI(result, true);\n        if (result.isValid) {\n            updateThemeSelect(example);\n            processInput();\n        }\n    });\n    $('#driverLicenseExample').on('click', function() {\n        hasUserInput = true; // Set flag when example is loaded\n        const example = window.examples['BelgianDriverLicenseCredential'];\n        updateEditor(example);\n        const result = validateVC(JSON.stringify(example));\n        updateValidationUI(result, true);\n        if (result.isValid) {\n            updateThemeSelect(example);\n            processInput();\n        }\n    });\n    // Handle paste events to format JSON\n    jsonEditor.addEventListener('paste', function(e) {\n        e.preventDefault();\n        const text = e.clipboardData.getData('text');\n        updateEditor(text);\n    });\n    // Theme management\n    function getThemesByCredentialType(credentialType) {\n        logger.debug('Getting themes for credential type:', credentialType);\n        return BaseTheme.getThemesByType(credentialType);\n    }\n    function updateThemeSelect(credential) {\n        const $select = $('#themeSelect');\n        const $themeInfo = $('.theme-info');\n        // Clear existing options\n        $select.empty().append('<option value=\"\">Select a theme...</option>');\n        if (!credential || !credential.type) {\n            $select.prop('disabled', true);\n            $themeInfo.addClass('d-none');\n            return;\n        }\n        // Get the most specific credential type\n        const credentialType = credential.type[credential.type.length - 1];\n        const themes = getThemesByCredentialType(credentialType);\n        if (themes.length > 0) {\n            // Add theme options with full theme IDs\n            themes.forEach((theme)=>{\n                const fullThemeId = `${credentialType}:${theme.id}`;\n                $select.append(`<option value=\"${fullThemeId}\">${theme.name}</option>`);\n            });\n            // Enable select and show theme info\n            $select.prop('disabled', false);\n            updateThemeInfo(themes[0]);\n            $themeInfo.removeClass('d-none');\n            // Select the first theme by default\n            $select.val(`${credentialType}:${themes[0].id}`);\n        } else {\n            // If no specific themes found, try to use the default theme\n            const defaultThemes = getThemesByCredentialType('VerifiableCredential');\n            if (defaultThemes.length > 0) {\n                defaultThemes.forEach((theme)=>{\n                    const defaultThemeId = `VerifiableCredential:${theme.id}`;\n                    $select.append(`<option value=\"${defaultThemeId}\">${theme.name}</option>`);\n                });\n                $select.prop('disabled', false);\n                updateThemeInfo(defaultThemes[0]);\n                $themeInfo.removeClass('d-none');\n                $select.val(`VerifiableCredential:${defaultThemes[0].id}`);\n            } else {\n                $select.prop('disabled', true);\n                $themeInfo.addClass('d-none');\n            }\n        }\n    }\n    function updateThemeInfo(themeInfo) {\n        if (!themeInfo) return;\n        $('.theme-info').removeClass('d-none').find('.theme-name').text(themeInfo.name).end().find('.theme-description').text(themeInfo.description).end().find('.theme-author').text(`Created by ${themeInfo.author}`);\n    }\n    // Add theme select change handler\n    $('#themeSelect').change(function() {\n        processInput();\n    });\n    function renderCredential(credential, selectedTheme = '') {\n        try {\n            // Get the most specific credential type\n            const credentialType = credential.type[credential.type.length - 1];\n            logger.debug('Rendering credential of type:', credentialType);\n            // Get the theme class\n            let ThemeClass;\n            if (selectedTheme) {\n                logger.debug('Using selected theme:', selectedTheme);\n                ThemeClass = BaseTheme.getTheme(selectedTheme);\n            } else {\n                // Try to find a theme that supports this credential type\n                const themes = getThemesByCredentialType(credentialType);\n                logger.debug('Available themes:', themes);\n                if (themes.length > 0) {\n                    // Use the first theme's full ID (e.g., \"UniversityDegreeCredential:classic\")\n                    const themeId = `${credentialType}:${themes[0].id}`;\n                    logger.debug('Using first available theme:', themeId);\n                    ThemeClass = BaseTheme.getTheme(themeId);\n                } else {\n                    // Fall back to default theme\n                    logger.debug('No specific themes found, trying default theme');\n                    const defaultThemes = getThemesByCredentialType('VerifiableCredential');\n                    if (defaultThemes.length > 0) {\n                        const defaultThemeId = `VerifiableCredential:${defaultThemes[0].id}`;\n                        ThemeClass = BaseTheme.getTheme(defaultThemeId);\n                    } else ThemeClass = null;\n                }\n            }\n            logger.debug('Selected ThemeClass:', ThemeClass);\n            if (!ThemeClass) throw new Error(`No theme found for credential type: ${credentialType}`);\n            // Create and render the theme\n            const theme = new ThemeClass(credential);\n            return theme.render();\n        } catch (error) {\n            logger.error('Error rendering credential:', error);\n            return document.createElement('div');\n        }\n    }\n    function showError(message) {\n        const errorHtml = `\n            <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n                ${message}\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\n            </div>\n        `;\n        $('#previewContainer').prepend(errorHtml);\n        $('#outputCard').removeClass('d-none');\n    }\n    // Update example loading to use new editor\n    $('#loadUniversityExample').click(function() {\n        logger.debug('Loading university degree example');\n        const example = examples['UniversityDegreeCredential'];\n        if (example) {\n            updateEditor(example);\n            const result = validateVC(JSON.stringify(example));\n            updateValidationUI(result);\n            if (result.isValid) {\n                updateThemeSelect(example);\n                processInput();\n            }\n        } else {\n            logger.error('University degree example not found');\n            showError('Failed to load university degree example');\n        }\n    });\n    $('#loadDriverLicenseExample').click(function() {\n        logger.debug('Loading driver license example');\n        const example = examples['BelgianDriverLicenseCredential'];\n        if (example) {\n            updateEditor(example);\n            const result = validateVC(JSON.stringify(example));\n            updateValidationUI(result);\n            if (result.isValid) {\n                updateThemeSelect(example);\n                processInput();\n            }\n        } else {\n            logger.error('Driver license example not found');\n            showError('Failed to load driver license example');\n        }\n    });\n    // Browser compatibility check for export features\n    function isChromiumBased() {\n        const userAgent = navigator.userAgent.toLowerCase();\n        return /chrome/.test(userAgent) || /chromium/.test(userAgent) || /brave/.test(userAgent);\n    }\n    function showBrowserCompatibilityError() {\n        showError(`\n            Export features require a Chromium-based browser. Please use either:\n            <div class=\"mt-2\">\n                <a href=\"https://brave.com\" target=\"_blank\" class=\"text-decoration-none me-3\">\n                    <i class=\"fa-brands fa-brave\"></i> Brave Browser\n                </a>\n                <a href=\"https://www.google.com/chrome\" target=\"_blank\" class=\"text-decoration-none\">\n                    <i class=\"fa-brands fa-chrome\"></i> Google Chrome\n                </a>\n            </div>\n        `);\n    }\n    // Export functionality\n    $('#exportImage').click(async function() {\n        const $output = $('#previewContainer');\n        const $credential = $output.children().first(); // Get first child of preview container\n        if ($credential.length === 0) {\n            showError('No credential to export. Please input a valid credential first.');\n            return;\n        }\n        try {\n            // Show loading state\n            const $btn = $(this);\n            const originalText1 = $btn.html();\n            $btn.prop('disabled', true).html('<i class=\"fas fa-spinner fa-spin\"></i> Exporting...');\n            // Create canvas from the credential\n            const canvas = await html2canvas($credential[0], {\n                scale: 2,\n                backgroundColor: '#ffffff',\n                logging: false,\n                useCORS: true,\n                allowTaint: true\n            });\n            // Convert to image and download\n            const link = document.createElement('a');\n            link.download = 'credential.png';\n            link.href = canvas.toDataURL('image/png');\n            link.click();\n            // Reset button state\n            $btn.prop('disabled', false).html(originalText1);\n            logger.info('Credential exported as image');\n        } catch (error) {\n            logger.error('Error exporting credential as image:', error);\n            showError('Failed to export image. Please try again.');\n            $(this).prop('disabled', false).html(originalText);\n        }\n    });\n    $('#exportPDF').click(async function() {\n        const $output = $('#previewContainer');\n        const $credential = $output.children().first(); // Get first child of preview container\n        if ($credential.length === 0) {\n            showError('No credential to export. Please input a valid credential first.');\n            return;\n        }\n        try {\n            // Show loading state\n            const $btn = $(this);\n            const originalText1 = $btn.html();\n            $btn.prop('disabled', true).html('<i class=\"fas fa-spinner fa-spin\"></i> Exporting...');\n            // Create canvas from the credential\n            const canvas = await html2canvas($credential[0], {\n                scale: 2,\n                backgroundColor: '#ffffff',\n                logging: false,\n                useCORS: true,\n                allowTaint: true\n            });\n            // Initialize PDF with A4 format\n            const { jsPDF: jsPDF } = window.jspdf;\n            const pdf = new jsPDF({\n                orientation: 'portrait',\n                unit: 'mm',\n                format: 'a4'\n            });\n            // Calculate dimensions\n            const imgData = canvas.toDataURL('image/png');\n            const pageWidth = pdf.internal.pageSize.getWidth();\n            const pageHeight = pdf.internal.pageSize.getHeight();\n            const margin = 20; // 20mm margins\n            // Calculate image dimensions to fit within margins while maintaining aspect ratio\n            const imageWidth = canvas.width;\n            const imageHeight = canvas.height;\n            const ratio = imageWidth / imageHeight;\n            let finalWidth = pageWidth - margin * 2;\n            let finalHeight = finalWidth / ratio;\n            if (finalHeight > pageHeight - margin * 2) {\n                finalHeight = pageHeight - margin * 2;\n                finalWidth = finalHeight * ratio;\n            }\n            // Center the image\n            const x = (pageWidth - finalWidth) / 2;\n            const y = (pageHeight - finalHeight) / 2;\n            // Add the image and save\n            pdf.addImage(imgData, 'PNG', x, y, finalWidth, finalHeight);\n            pdf.save('credential.pdf');\n            // Reset button state\n            $btn.prop('disabled', false).html(originalText1);\n            logger.info('Credential exported as PDF');\n        } catch (error) {\n            logger.error('Error exporting credential as PDF:', error);\n            showError('Failed to export PDF. Please try again.');\n            $(this).prop('disabled', false).html(originalText);\n        }\n    });\n    // Initial state - don't show validation feedback\n    $('.validation-feedback').removeClass('show');\n});\n\n})();\n//# sourceMappingURL=main.js.map\n","$(document).ready(function() {\n    // Only run initialization code on the viewer page\n    if (!document.getElementById('jsonInput')) {\n        return;\n    }\n\n    // Validation timeout for debouncing\n    let validationTimeout;\n    let hasUserInput = false; // Track if user has interacted with the editor\n\n    // Initialize JSON editor first\n    const jsonEditor = document.getElementById('jsonInput');\n    \n    // Function to update editor content with proper formatting\n    function updateEditor(json) {\n        let formatted;\n        try {\n            // If json is a string, parse it first\n            const obj = typeof json === 'string' ? JSON.parse(json) : json;\n            formatted = JSON.stringify(obj, null, 2);\n        } catch (e) {\n            formatted = json || '';\n        }\n        \n        jsonEditor.textContent = formatted;\n        Prism.highlightElement(jsonEditor);\n    }\n\n    // Setup console logging with timestamp\n    window.logger = {\n        info: (msg, data) => {\n            const time = new Date().toISOString();\n            console.log(`[${time}] INFO: ${msg}`, data || '');\n        },\n        error: (msg, err) => {\n            const time = new Date().toISOString();\n            console.error(`[${time}] ERROR: ${msg}`, err || '');\n        },\n        debug: (msg, data) => {\n            const time = new Date().toISOString();\n            console.debug(`[${time}] DEBUG: ${msg}`, data || '');\n        }\n    };\n\n    // Function to handle URL parameters and initialize theme\n    function initializeFromUrl() {\n        const params = new URLSearchParams(window.location.search);\n        const themeParam = params.get('theme');\n        \n        if (themeParam) {\n            const [credentialType, themeVariant] = themeParam.split(':');\n            if (window.examples[credentialType]) {\n                hasUserInput = true;\n                const example = window.examples[credentialType];\n                updateEditor(example);\n                const result = validateVC(JSON.stringify(example));\n                updateValidationUI(result, true);\n                if (result.isValid) {\n                    // Update theme selector first\n                    updateThemeSelector(credentialType);\n                    // Then set the selected theme\n                    $('#themeSelect').val(themeParam);\n                    processInput();\n                }\n            }\n        }\n    }\n\n    // Call initialization after everything is set up\n    setTimeout(initializeFromUrl, 100); // Increased timeout to ensure DOM is ready\n\n    // Real-time validation\n    function validateVC(jsonStr) {\n        try {\n            if (!jsonStr.trim()) {\n                return { isValid: false, error: 'Input is empty' };\n            }\n\n            let credential;\n            try {\n                credential = JSON.parse(jsonStr);\n            } catch (e) {\n                return { \n                    isValid: false, \n                    error: 'Invalid JSON format',\n                    details: e.message\n                };\n            }\n\n            const errors = [];\n            \n            // Context validation\n            if (!credential['@context']) {\n                errors.push('Missing @context field');\n            } else if (!Array.isArray(credential['@context'])) {\n                errors.push('@context must be an array');\n            } else if (!credential['@context'].includes('https://www.w3.org/2018/credentials/v1')) {\n                errors.push('@context must include \"https://www.w3.org/2018/credentials/v1\"');\n            }\n            \n            // Type validation\n            if (!credential.type) {\n                errors.push('Missing type field');\n            } else if (!Array.isArray(credential.type)) {\n                errors.push('type must be an array');\n            } else {\n                if (!credential.type.includes('VerifiableCredential')) {\n                    errors.push('type must include \"VerifiableCredential\"');\n                }\n                if (credential.type.length < 2) {\n                    errors.push('type should include at least one specific credential type');\n                }\n            }\n            \n            // Issuer validation\n            if (!credential.issuer) {\n                errors.push('Missing issuer field');\n            } else if (typeof credential.issuer !== 'object' && typeof credential.issuer !== 'string') {\n                errors.push('issuer must be an object or string');\n            } else if (typeof credential.issuer === 'object' && !credential.issuer.id) {\n                errors.push('issuer object must have an id field');\n            }\n            \n            // Issuance date validation\n            if (!credential.issuanceDate) {\n                errors.push('Missing issuanceDate field');\n            } else {\n                try {\n                    new Date(credential.issuanceDate).toISOString();\n                } catch (e) {\n                    errors.push('issuanceDate must be a valid ISO 8601 date');\n                }\n            }\n            \n            // Credential subject validation\n            if (!credential.credentialSubject) {\n                errors.push('Missing credentialSubject field');\n            } else if (typeof credential.credentialSubject !== 'object') {\n                errors.push('credentialSubject must be an object');\n            }\n\n            if (errors.length > 0) {\n                return {\n                    isValid: false,\n                    error: 'Invalid Verifiable Credential',\n                    details: errors\n                };\n            }\n\n            return { \n                isValid: true,\n                details: [\n                    `Valid credential type: ${credential.type[credential.type.length - 1]}`,\n                    `Issued by: ${typeof credential.issuer === 'string' ? credential.issuer : credential.issuer.name || credential.issuer.id}`,\n                    `Issued on: ${new Date(credential.issuanceDate).toLocaleDateString()}`\n                ]\n            };\n        } catch (e) {\n            return { \n                isValid: false, \n                error: 'Validation error',\n                details: e.message\n            };\n        }\n    }\n\n    function updateValidationUI(validationResult, hasUserInput = false) {\n        const $feedback = $('.validation-feedback');\n        \n        // Remove existing validation states\n        $feedback.removeClass('is-valid is-invalid show');\n        \n        // Only show validation feedback if there's user input\n        if (!hasUserInput) {\n            return;\n        }\n        \n        // Show the feedback container and add appropriate state\n        $feedback.addClass('show');\n        \n        if (validationResult.isValid) {\n            $feedback.addClass('is-valid');\n        } else {\n            $feedback.addClass('is-invalid');\n            \n            if (validationResult.details) {\n                const detailsHtml = Array.isArray(validationResult.details)\n                    ? `<ul class=\"validation-details\">\n                        ${validationResult.details.map(detail => `<li>${detail}</li>`).join('')}\n                       </ul>`\n                    : `<div class=\"mt-1\">${validationResult.details}</div>`;\n                \n                $('.invalid-feedback').html(`\n                    <i class=\"fas fa-exclamation-circle\"></i>\n                    <div>\n                        <strong>${validationResult.error}</strong>\n                        ${detailsHtml}\n                    </div>\n                `);\n            }\n        }\n    }\n\n    function updateThemeSelector(credentialType) {\n        const $themeSelect = $('#themeSelect');\n        $themeSelect.empty();\n        \n        const themes = BaseTheme.getThemesByType(credentialType);\n        if (themes && themes.length > 0) {\n            themes.forEach(theme => {\n                const themeId = `${credentialType}:${theme.id}`;\n                $themeSelect.append(`<option value=\"${themeId}\">${theme.name}</option>`);\n            });\n            // Select the first theme by default\n            $themeSelect.val(`${credentialType}:${themes[0].id}`);\n        } else {\n            $themeSelect.append('<option value=\"\" disabled>No themes available</option>');\n        }\n    }\n\n    // Update the processInput function to handle theme selection\n    function processInput() {\n        const jsonInput = jsonEditor.textContent.trim();\n        \n        if (!jsonInput) {\n            updateValidationUI({ isValid: false, error: 'Input is empty' }, true);\n            document.getElementById('previewContainer').innerHTML = '';\n            return;\n        }\n\n        try {\n            const credential = JSON.parse(jsonInput);\n            \n            // Validate the credential\n            const validationResult = validateVC(jsonInput);\n            updateValidationUI(validationResult, true);\n            \n            if (!validationResult.isValid) {\n                // Clear only the preview if validation fails\n                document.getElementById('previewContainer').innerHTML = '';\n                return;\n            }\n            \n            const outputElement = document.getElementById('previewContainer');\n            \n            // Clear previous output\n            outputElement.innerHTML = '';\n            \n            // Get credential type and update theme selector\n            const credentialType = credential.type[credential.type.length - 1];\n            window.logger.debug(`Getting themes for credential type: ${credentialType}`);\n            \n            // Get URL theme parameter\n            const urlTheme = new URLSearchParams(window.location.search).get('theme');\n            \n            // Update theme selector if needed\n            if ($('#themeSelect option').length === 0) {\n                updateThemeSelector(credentialType);\n                if (urlTheme) {\n                    $('#themeSelect').val(urlTheme);\n                }\n            }\n            \n            // Get available themes\n            const themes = BaseTheme.getThemesByType(credentialType);\n            if (!themes || themes.length === 0) {\n                updateValidationUI({\n                    isValid: false,\n                    error: 'Theme Error',\n                    details: `No theme found for credential type: ${credentialType}`\n                }, true);\n                return;\n            }\n            \n            // Get selected theme\n            let selectedThemeId = urlTheme || $('#themeSelect').val() || `${credentialType}:${themes[0].id}`;\n            const ThemeClass = BaseTheme.getTheme(selectedThemeId);\n            \n            if (!ThemeClass) {\n                updateValidationUI({\n                    isValid: false,\n                    error: 'Theme Error',\n                    details: `Selected theme not found: ${selectedThemeId}`\n                }, true);\n                return;\n            }\n            \n            try {\n                const theme = new ThemeClass(credential);\n                const rendered = theme.render();\n                \n                if (rendered && rendered instanceof Element) {\n                    outputElement.innerHTML = '';\n                    outputElement.appendChild(rendered);\n                } else {\n                    console.error('Theme render() did not return a valid Element');\n                    outputElement.innerHTML = '<div class=\"alert alert-danger\">Error rendering credential</div>';\n                }\n            } catch (error) {\n                console.error('Error rendering theme:', error);\n                outputElement.innerHTML = '<div class=\"alert alert-danger\">Error rendering credential</div>';\n            }\n        } catch (error) {\n            // Update validation UI with error but don't clear it\n            updateValidationUI({\n                isValid: false,\n                error: 'Invalid JSON format',\n                details: error.message\n            }, true);\n            // Clear only the preview on error\n            document.getElementById('previewContainer').innerHTML = '';\n        }\n    }\n\n    // Handle editor input events\n    jsonEditor.addEventListener('input', function() {\n        hasUserInput = true; // Set flag when user types\n        \n        // Clear existing timeout\n        clearTimeout(validationTimeout);\n        \n        // Set new timeout for validation\n        validationTimeout = setTimeout(() => {\n            const jsonInput = jsonEditor.textContent.trim();\n            \n            // Only validate if user has interacted\n            if (hasUserInput) {\n                const validationResult = validateVC(jsonInput);\n                updateValidationUI(validationResult, true);\n                \n                // Only attempt to process and render if validation passes\n                if (validationResult.isValid) {\n                    processInput();\n                } else {\n                    // Just clear the preview, leaving validation messages visible\n                    document.getElementById('previewContainer').innerHTML = '';\n                }\n            }\n        }, 500);\n    });\n\n    // Update validation feedback elements if they don't exist\n    if (!$('.validation-feedback').length) {\n        $('.card').after(`\n            <div class=\"validation-feedback\">\n                <div class=\"valid-feedback\">\n                    <i class=\"fas fa-check-circle\"></i>\n                    <div>\n                        <strong>Valid Verifiable Credential</strong>\n                    </div>\n                </div>\n                <div class=\"invalid-feedback\"></div>\n            </div>\n        `);\n    }\n\n    // Style the validation feedback\n    $('<style>')\n        .text(`\n            .editor-container { position: relative; }\n            .validation-feedback {\n                padding: 0.75rem;\n                border-radius: 0.5rem;\n                margin-top: 1.5rem;\n                background: white;\n                box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n                display: none;\n            }\n            .validation-feedback.show {\n                display: block;\n            }\n            .validation-feedback i {\n                margin-right: 0.5rem;\n                font-size: 1.1em;\n            }\n            .validation-details {\n                padding-left: 1.5rem;\n                margin-top: 0.5rem;\n                font-size: 0.9em;\n            }\n            .validation-feedback.is-valid .valid-feedback { display: flex !important; }\n            .validation-feedback.is-valid .invalid-feedback { display: none !important; }\n            .validation-feedback.is-invalid .valid-feedback { display: none !important; }\n            .validation-feedback.is-invalid .invalid-feedback { display: flex !important; }\n        `)\n        .appendTo('head');\n\n    // Handle example buttons\n    $('#universityExample').on('click', function() {\n        hasUserInput = true; // Set flag when example is loaded\n        const example = window.examples['UniversityDegreeCredential'];\n        updateEditor(example);\n        const result = validateVC(JSON.stringify(example));\n        updateValidationUI(result, true);\n        if (result.isValid) {\n            updateThemeSelect(example);\n            processInput();\n        }\n    });\n\n    $('#driverLicenseExample').on('click', function() {\n        hasUserInput = true; // Set flag when example is loaded\n        const example = window.examples['BelgianDriverLicenseCredential'];\n        updateEditor(example);\n        const result = validateVC(JSON.stringify(example));\n        updateValidationUI(result, true);\n        if (result.isValid) {\n            updateThemeSelect(example);\n            processInput();\n        }\n    });\n\n    // Handle paste events to format JSON\n    jsonEditor.addEventListener('paste', function(e) {\n        e.preventDefault();\n        const text = e.clipboardData.getData('text');\n        updateEditor(text);\n    });\n\n    // Theme management\n    function getThemesByCredentialType(credentialType) {\n        logger.debug('Getting themes for credential type:', credentialType);\n        return BaseTheme.getThemesByType(credentialType);\n    }\n\n    function updateThemeSelect(credential) {\n        const $select = $('#themeSelect');\n        const $themeInfo = $('.theme-info');\n        \n        // Clear existing options\n        $select.empty().append('<option value=\"\">Select a theme...</option>');\n        \n        if (!credential || !credential.type) {\n            $select.prop('disabled', true);\n            $themeInfo.addClass('d-none');\n            return;\n        }\n        \n        // Get the most specific credential type\n        const credentialType = credential.type[credential.type.length - 1];\n        const themes = getThemesByCredentialType(credentialType);\n        \n        if (themes.length > 0) {\n            // Add theme options with full theme IDs\n            themes.forEach(theme => {\n                const fullThemeId = `${credentialType}:${theme.id}`;\n                $select.append(`<option value=\"${fullThemeId}\">${theme.name}</option>`);\n            });\n            \n            // Enable select and show theme info\n            $select.prop('disabled', false);\n            updateThemeInfo(themes[0]);\n            $themeInfo.removeClass('d-none');\n            \n            // Select the first theme by default\n            $select.val(`${credentialType}:${themes[0].id}`);\n        } else {\n            // If no specific themes found, try to use the default theme\n            const defaultThemes = getThemesByCredentialType('VerifiableCredential');\n            if (defaultThemes.length > 0) {\n                defaultThemes.forEach(theme => {\n                    const defaultThemeId = `VerifiableCredential:${theme.id}`;\n                    $select.append(`<option value=\"${defaultThemeId}\">${theme.name}</option>`);\n                });\n                $select.prop('disabled', false);\n                updateThemeInfo(defaultThemes[0]);\n                $themeInfo.removeClass('d-none');\n                $select.val(`VerifiableCredential:${defaultThemes[0].id}`);\n            } else {\n                $select.prop('disabled', true);\n                $themeInfo.addClass('d-none');\n            }\n        }\n    }\n\n    function updateThemeInfo(themeInfo) {\n        if (!themeInfo) return;\n        \n        $('.theme-info')\n            .removeClass('d-none')\n            .find('.theme-name').text(themeInfo.name)\n            .end()\n            .find('.theme-description').text(themeInfo.description)\n            .end()\n            .find('.theme-author').text(`Created by ${themeInfo.author}`);\n    }\n\n    // Add theme select change handler\n    $('#themeSelect').change(function() {\n        processInput();\n    });\n\n    function renderCredential(credential, selectedTheme = '') {\n        try {\n            // Get the most specific credential type\n            const credentialType = credential.type[credential.type.length - 1];\n            logger.debug('Rendering credential of type:', credentialType);\n            \n            // Get the theme class\n            let ThemeClass;\n            if (selectedTheme) {\n                logger.debug('Using selected theme:', selectedTheme);\n                ThemeClass = BaseTheme.getTheme(selectedTheme);\n            } else {\n                // Try to find a theme that supports this credential type\n                const themes = getThemesByCredentialType(credentialType);\n                logger.debug('Available themes:', themes);\n                \n                if (themes.length > 0) {\n                    // Use the first theme's full ID (e.g., \"UniversityDegreeCredential:classic\")\n                    const themeId = `${credentialType}:${themes[0].id}`;\n                    logger.debug('Using first available theme:', themeId);\n                    ThemeClass = BaseTheme.getTheme(themeId);\n                } else {\n                    // Fall back to default theme\n                    logger.debug('No specific themes found, trying default theme');\n                    const defaultThemes = getThemesByCredentialType('VerifiableCredential');\n                    if (defaultThemes.length > 0) {\n                        const defaultThemeId = `VerifiableCredential:${defaultThemes[0].id}`;\n                        ThemeClass = BaseTheme.getTheme(defaultThemeId);\n                    } else {\n                        ThemeClass = null;\n                    }\n                }\n            }\n            \n            logger.debug('Selected ThemeClass:', ThemeClass);\n            \n            if (!ThemeClass) {\n                throw new Error(`No theme found for credential type: ${credentialType}`);\n            }\n            \n            // Create and render the theme\n            const theme = new ThemeClass(credential);\n            return theme.render();\n            \n        } catch (error) {\n            logger.error('Error rendering credential:', error);\n            return document.createElement('div');\n        }\n    }\n\n    function showError(message) {\n        const errorHtml = `\n            <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n                ${message}\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\n            </div>\n        `;\n        $('#previewContainer').prepend(errorHtml);\n        $('#outputCard').removeClass('d-none');\n    }\n\n    // Update example loading to use new editor\n    $('#loadUniversityExample').click(function() {\n        logger.debug('Loading university degree example');\n        const example = examples['UniversityDegreeCredential'];\n        if (example) {\n            updateEditor(example);\n            const result = validateVC(JSON.stringify(example));\n            updateValidationUI(result);\n            if (result.isValid) {\n                updateThemeSelect(example);\n                processInput();\n            }\n        } else {\n            logger.error('University degree example not found');\n            showError('Failed to load university degree example');\n        }\n    });\n\n    $('#loadDriverLicenseExample').click(function() {\n        logger.debug('Loading driver license example');\n        const example = examples['BelgianDriverLicenseCredential'];\n        if (example) {\n            updateEditor(example);\n            const result = validateVC(JSON.stringify(example));\n            updateValidationUI(result);\n            if (result.isValid) {\n                updateThemeSelect(example);\n                processInput();\n            }\n        } else {\n            logger.error('Driver license example not found');\n            showError('Failed to load driver license example');\n        }\n    });\n\n    // Browser compatibility check for export features\n    function isChromiumBased() {\n        const userAgent = navigator.userAgent.toLowerCase();\n        return /chrome/.test(userAgent) || /chromium/.test(userAgent) || /brave/.test(userAgent);\n    }\n\n    function showBrowserCompatibilityError() {\n        showError(`\n            Export features require a Chromium-based browser. Please use either:\n            <div class=\"mt-2\">\n                <a href=\"https://brave.com\" target=\"_blank\" class=\"text-decoration-none me-3\">\n                    <i class=\"fa-brands fa-brave\"></i> Brave Browser\n                </a>\n                <a href=\"https://www.google.com/chrome\" target=\"_blank\" class=\"text-decoration-none\">\n                    <i class=\"fa-brands fa-chrome\"></i> Google Chrome\n                </a>\n            </div>\n        `);\n    }\n\n    // Export functionality\n    $('#exportImage').click(async function() {\n        const $output = $('#previewContainer');\n        const $credential = $output.children().first(); // Get first child of preview container\n        \n        if ($credential.length === 0) {\n            showError('No credential to export. Please input a valid credential first.');\n            return;\n        }\n        \n        try {\n            // Show loading state\n            const $btn = $(this);\n            const originalText = $btn.html();\n            $btn.prop('disabled', true).html('<i class=\"fas fa-spinner fa-spin\"></i> Exporting...');\n            \n            // Create canvas from the credential\n            const canvas = await html2canvas($credential[0], {\n                scale: 2,\n                backgroundColor: '#ffffff',\n                logging: false,\n                useCORS: true,\n                allowTaint: true\n            });\n            \n            // Convert to image and download\n            const link = document.createElement('a');\n            link.download = 'credential.png';\n            link.href = canvas.toDataURL('image/png');\n            link.click();\n            \n            // Reset button state\n            $btn.prop('disabled', false).html(originalText);\n            \n            logger.info('Credential exported as image');\n        } catch (error) {\n            logger.error('Error exporting credential as image:', error);\n            showError('Failed to export image. Please try again.');\n            $(this).prop('disabled', false).html(originalText);\n        }\n    });\n\n    $('#exportPDF').click(async function() {\n        const $output = $('#previewContainer');\n        const $credential = $output.children().first(); // Get first child of preview container\n        \n        if ($credential.length === 0) {\n            showError('No credential to export. Please input a valid credential first.');\n            return;\n        }\n        \n        try {\n            // Show loading state\n            const $btn = $(this);\n            const originalText = $btn.html();\n            $btn.prop('disabled', true).html('<i class=\"fas fa-spinner fa-spin\"></i> Exporting...');\n            \n            // Create canvas from the credential\n            const canvas = await html2canvas($credential[0], {\n                scale: 2,\n                backgroundColor: '#ffffff',\n                logging: false,\n                useCORS: true,\n                allowTaint: true\n            });\n            \n            // Initialize PDF with A4 format\n            const { jsPDF } = window.jspdf;\n            const pdf = new jsPDF({\n                orientation: 'portrait',\n                unit: 'mm',\n                format: 'a4'\n            });\n            \n            // Calculate dimensions\n            const imgData = canvas.toDataURL('image/png');\n            const pageWidth = pdf.internal.pageSize.getWidth();\n            const pageHeight = pdf.internal.pageSize.getHeight();\n            const margin = 20; // 20mm margins\n            \n            // Calculate image dimensions to fit within margins while maintaining aspect ratio\n            const imageWidth = canvas.width;\n            const imageHeight = canvas.height;\n            const ratio = imageWidth / imageHeight;\n            \n            let finalWidth = pageWidth - (margin * 2);\n            let finalHeight = finalWidth / ratio;\n            \n            if (finalHeight > pageHeight - (margin * 2)) {\n                finalHeight = pageHeight - (margin * 2);\n                finalWidth = finalHeight * ratio;\n            }\n            \n            // Center the image\n            const x = (pageWidth - finalWidth) / 2;\n            const y = (pageHeight - finalHeight) / 2;\n            \n            // Add the image and save\n            pdf.addImage(imgData, 'PNG', x, y, finalWidth, finalHeight);\n            pdf.save('credential.pdf');\n            \n            // Reset button state\n            $btn.prop('disabled', false).html(originalText);\n            \n            logger.info('Credential exported as PDF');\n        } catch (error) {\n            logger.error('Error exporting credential as PDF:', error);\n            showError('Failed to export PDF. Please try again.');\n            $(this).prop('disabled', false).html(originalText);\n        }\n    });\n\n    // Initial state - don't show validation feedback\n    $('.validation-feedback').removeClass('show');\n}); "],"names":["$","document","ready","validationTimeout","getElementById","hasUserInput","jsonEditor","updateEditor","json","formatted","obj","JSON","parse","stringify","e","textContent","Prism","highlightElement","validateVC","jsonStr","credential","trim","isValid","error","details","message","errors","Array","isArray","includes","push","type","length","issuer","id","issuanceDate","Date","toISOString","credentialSubject","name","toLocaleDateString","updateValidationUI","validationResult","$feedback","removeClass","addClass","detailsHtml","map","detail","join","html","updateThemeSelector","credentialType","$themeSelect","empty","themes","BaseTheme","getThemesByType","forEach","theme","themeId","append","val","processInput","jsonInput","innerHTML","outputElement","window","logger","debug","urlTheme","URLSearchParams","location","search","get","selectedThemeId","ThemeClass","getTheme","rendered","render","Element","appendChild","console","getThemesByCredentialType","updateThemeSelect","$select","$themeInfo","prop","fullThemeId","updateThemeInfo","defaultThemes","defaultThemeId","themeInfo","find","text","end","description","author","showError","errorHtml","prepend","info","msg","data","time","log","err","setTimeout","themeParam","params","themeVariant","split","examples","example","result","addEventListener","clearTimeout","after","appendTo","on","preventDefault","clipboardData","getData","change","click","$credential","$output","children","first","$btn","originalText1","canvas","html2canvas","scale","backgroundColor","logging","useCORS","allowTaint","link","createElement","download","href","toDataURL","originalText","jsPDF","jspdf","pdf","orientation","unit","format","imgData","pageWidth","internal","pageSize","getWidth","pageHeight","getHeight","imageWidth","width","imageHeight","height","ratio","finalWidth","margin","finalHeight","x","y","addImage","save"],"version":3,"file":"main.js.map"}