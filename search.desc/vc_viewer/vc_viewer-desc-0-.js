searchState.loadedDescShard("vc_viewer", 0, "VC Viewer Backend Library\nConfiguration management\nHTTP route handlers\nTemplate management and rendering\nUtility functions\nServer configuration settings\nServer bind address\nClient disconnect timeout\nReturns the argument unchanged.\nGet the full bind address (address:port)\nCalls <code>U::from(self)</code>.\nCreate a new configuration with custom settings\nServer port\nClient request timeout\nSet the bind address\nSet the client disconnect timeout\nSet the server port\nSet the client request timeout\nSet the number of worker threads\nNumber of worker threads\nGet the host address from environment or default\nGet the port from environment or default\nCustom error types for the application\nInternal server error\nNot found error\nTemplate rendering error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPage handlers\nHandler for the about page\nHandler for the cookie policy page\nHandler for the theme creation documentation page\nHandler for the documentation page\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandler for the index page\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHandler for the privacy policy page\nHandler for the themes page\nHandler for the viewer page\nCompression monitoring middleware\nMiddleware for monitoring response compression\nThe actual middleware service that processes requests\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBase context containing common template variables\nGlobal template instance, initialized once and shared …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new context for template rendering with base …\nCustom writer that writes to both file and stderr\nFormat a file size in bytes to a human-readable string\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new MultiOutput instance\nSetup logging based on the environment")